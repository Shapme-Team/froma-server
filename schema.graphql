### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String!
  id: ID!
  mainAddress: String!
  nearBy: String
  orders: [Order]
  phoneNumber: Int!
  pincode: Int!
  state: String!
  user: User
  userId: String
}

input AddressInputType {
  city: String!
  mainAddress: String!
  nearBy: String
  phoneNumber: Int!
  pincode: Int!
  state: String!
  userId: String
}

type Cart {
  id: ID!
  products: [CartProduct]
  user: User
  userId: String
}

type CartProduct {
  cart: Cart
  cartId: String
  id: ID!
  order: Order
  orderId: String
  product: Product
  productId: String
  quantity: Int
}

type Category {
  id: ID!
  name: String!
  products: [Product]
  subcategories: [SubCategory]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  addAddressToUser(addressInputSchema: AddressInputType!, userId: String!): Address
  addProductItemToCart(cartId: String!, productId: String!, quantity: Int! = 1): CartProduct
  createCategory(name: String!): Category
  createOrderForUser(orderUniqueInput: OrderInputType!): Order
  createProduct(productInput: ProductInputType!): Product
  createSellerData(sellerInputType: SellerInputType!): Seller
  createSubCategory(categoryId: String!, name: String!): SubCategory
  createUserData(userUniqueInput: UserUniqueInput!): User
  deleteCartProduct(cartProudctId: String!): Cart
  deleteCategory(categoryId: String!): Category
  deleteProductById(productId: String!): Product
  deleteSubCategory(subCategoryId: String!): SubCategory
  deleteUser(userId: String!): User
  deleteUserAddress(addressId: String!): Address
  updateCartProductQuantity(id: ID!, quantity: Int!): CartProduct
  updateCategoryName(categoryId: String!, categoryName: String!): Category
  updateProductDetails(productArg: UpdateProductInput!, productId: String!): Product
  updateSubCategoryName(subCategoryId: String!, subCategoryName: String!): SubCategory
  updateUserAddress(addressArg: UpdateAddressInput!): Address
  updateUserInfo(userUpdateInputType: UserUpdateInputType!): User
}

type Order {
  addresId: String
  createdAt: DateTime!
  id: ID!
  orderAddress: Address
  paymentMethod: String!
  products: [CartProduct]
  user: User
  userId: String
}

input OrderInputType {
  addresId: String
  paymentMethod: String!
  productIds: [String!]!
  userId: String
}

type Product {
  availability: Boolean
  carts: [Cart]
  category: Category
  categoryId: String
  description: String!
  id: ID!
  imageUrl: String!
  orders: [Order]
  price: Int
  seller: Seller
  sellerId: String
  stockQuantity: Int!
  subCategoryId: String
  subcategory: SubCategory
  title: String!
  unit: String!
  viewCount: Int!
  weight: Int
}

input ProductInputType {
  availability: Boolean
  categoryId: String
  description: String!
  imageUrl: String!
  price: Int
  sellerId: String
  stockQuantity: Int!
  subCategoryId: String
  title: String!
  unit: String!
  viewCount: Int!
  weight: Int
}

type Query {
  getAllCategory: [Category]
  getAllProducts(cursorId: String, limit: Int): [Product]
  getAllSellers: [Seller]
  getAllUsers: [User]
  getCartByUserId(userId: String!): Cart
  getOrderByOrderId(orderId: String!): Order
  getOrdersByUserId(userId: String!): [Order]
  getProductByProductId(productId: String!): Product
  getProductOfSellerBySellerId(limit: Int, sellerId: String!, skip: Int): [Product]
  getProductsOfCart(cartId: String!): Cart
  getProdutsByCategoryIds(categoryId: String!, cursorId: String, limit: Int): [Product]
  getProdutsBySubCategoryId(cursorId: String, limit: Int, subCategoryId: String!): [Product]
  getSellerBySellerId(sellerId: String!): Seller
  getSubCategoriesByCategoryId(categoryId: String!): [SubCategory]
  getUserByUserId(userId: String!): User
}

type Seller {
  email: String!
  id: ID!
  name: String
  phoneNumber: Int!
  products: [Product]
}

input SellerInputType {
  email: String!
  id: ID!
  name: String!
  phoneNumber: Int!
}

type SubCategory {
  category: Category
  categoryid: String
  id: ID!
  name: String!
  products: [Product]
}

input UpdateAddressInput {
  city: String
  id: ID!
  mainAddress: String
  nearBy: String
  phoneNumber: Int
  pincode: Int
  state: String
}

input UpdateProductInput {
  availability: Boolean
  categoryId: String
  description: String
  imageUrl: String
  price: Int
  stockQuantity: Int
  subCategoryId: String
  title: String
  unit: String
  weight: Int
}

type User {
  address: [Address]
  cart: Cart
  email: String!
  id: ID!
  name: String!
  orders: [Order]
  phoneNumber: Int
}

input UserUniqueInput {
  email: String!
  name: String!
  phoneNumber: Int
}

input UserUpdateInputType {
  id: ID!
  name: String
  phoneNumber: Int
}
